const b=["B","kB","MB","GB","TB","PB","EB","ZB","YB"],l=["B","kiB","MiB","GiB","TiB","PiB","EiB","ZiB","YiB"],T=["b","kbit","Mbit","Gbit","Tbit","Pbit","Ebit","Zbit","Ybit"],d=["b","kibit","Mibit","Gibit","Tibit","Pibit","Eibit","Zibit","Yibit"],B=(t,i,e)=>{let a=t;return typeof i=="string"||Array.isArray(i)?a=t.toLocaleString(i,e):(i===!0||e!==void 0)&&(a=t.toLocaleString(void 0,e)),a};var y=(t,i)=>{if(!Number.isFinite(t))throw new TypeError(`Expected a finite number, got ${typeof t}: ${t}`);i=Object.assign({bits:!1,binary:!1},i);const e=i.bits?i.binary?d:T:i.binary?l:b;if(i.signed&&t===0)return` 0 ${e[0]}`;const a=t<0,n=a?"-":i.signed?"+":"";a&&(t=-t);let r;if(i.minimumFractionDigits!==void 0&&(r={minimumFractionDigits:i.minimumFractionDigits}),i.maximumFractionDigits!==void 0&&(r=Object.assign({maximumFractionDigits:i.maximumFractionDigits},r)),t<1){const s=B(t,i.locale,r);return n+s+" "+e[0]}const c=Math.min(Math.floor(i.binary?Math.log(t)/Math.log(1024):Math.log10(t)/3),e.length-1);t/=Math.pow(i.binary?1024:1e3,c),r||(t=t.toPrecision(3));const g=B(Number(t),i.locale,r),f=e[c];return n+g+" "+f};export default y;
